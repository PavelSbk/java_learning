package org.example.format;

import java.util.Calendar;

public class Format {

    /**
     * String.format() - Одним из самых удобных способов построения сложных строк
     * <p>
     * Разница между format() и printf():
     * - format() выполняет форматирование и возвращает новую строку
     * - printf() выполняет форматирование и выводит данные в консоль без сохранения
     * <p>
     * Полезные ссылки:
     * https://habr.com/ru/company/otus/blog/592585/
     * <p>
     * Документация JDK19:
     * https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/Formatter.html
     */

    public static void getGreeting(String name) {
        System.out.println(String.format("Привет! Я - %s", name));
    }

    public static void getGreetingAndAge(String name, int age) {
        System.out.println(String.format("Привет! Я - %s, мне %d", name, age));
    }

    public static void getGreetingAndTime(String name) {
        Calendar instance = Calendar.getInstance();
        System.out.println(
                String.format(
                        "Привет, %s! Текущая дата: %tF, Текущее время: %tT", name, instance, instance
                )
        );
    }

    public static void main(String[] args) {
        /**
         * %s- спецификатор означающий тип аргумента,
         * который будет передан на форматирование (подстановку).
         */
        getGreeting("Public Sbk");
        /**
         * d% - спецификатор для передачи на форматирование целого числа.
         */
        getGreetingAndAge("Public Sbk", 35);
        /**
         * %b - спецификатор, который превращает любой переданный аргумент в true,
         * но если передан null, то в false.
         */
        System.out.println(String.format("Аргумент передан? %b", 55));
        /**
         * %c - спецификаторы, который задаёт любой символ из таблицы Юникод
         * в виде oct, dec, hec или char.
         */
        System.out.println(String.format("Hi! I'm %c%c%c%c", 0120, 97, 0x75, 'l'));
        /**
         * %n - спецификатор разделителя строк.
         */
        System.out.format("Строка1%nСтрока2%n");
        /**
         * %t - спецификатор преобразует дату и время.
         * Применяется только с дополнительными флагами:
         * флаг F выводит дату в формате ISO 8601 - ГГГГ-ММ-ДД,
         * а флаг T выводит время в формате ЧЧ:ММ:СС.
         */
        getGreetingAndTime("Public Sbk");
        /**
         * %f - спецификатор задаёт число с плавающей точкой.
         * По умолчанию при задании числа с плавающей точкой выводится 6 символов после точки.
         * %.*f - lля ограничения или увеличения цифр после точки.
         */
        System.out.println(String.format("Задаем число 0.89 - %f", 0.89));
        System.out.println(String.format("Задаем число 0.89 - %.2f", 0.891));
        /**
         * Специальные настройки.
         * С помощью специальных настроек можно указывать позицию аргумента в списке,
         * устанавливать специальные флаги,
         * минимальное количество выводимых символов и ограничение количества символов.
         *
         * Синтаксис записи всех настроек выглядит так:
         *
         * %[индекс_аргумента$][флаг(и)][ширина][.точность]спецификатор
         *
         * Данная запись называется инструкцией.
         *
         * - С помощью индекса аргумента можно указать позицию
         * в списке аргументов (в виде целого числа).
         * Например, на первый аргумент можно сослаться в виде 1$,
         * а на четвертый - 4$. Если это явно не указано,
         * то все аргументы должны быть переданы в метод в порядке объявления
         * в шаблоне ссылок на них.
         *
         * - Флаги - это отдельные символы для изменения результата форматирования.
         * Например, флаг "+" добавит знак "+" к получившемуся результату,
         * а флаг "," выведет результат с разделителем в виде запятой у тысяч.
         *
         * - Ширина определяет количество выводимых символов.
         * Задаётся целым положительным числом. Если перед ним поставить 0,
         * то если общее количество символов строки вывода будет менее этого значения,
         * разница будет заполнена нулями.
         *
         * - Точность выставляется как в %.*f
         */

        System.out.println(String.format("%1$,+016.2f", 5000000.0000));
    }
}
